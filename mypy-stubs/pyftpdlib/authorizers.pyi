from .handlers import FTPHandler

from typing import (
    Any,
    Sequence,
)

__all__ = ["DummyAuthorizer"]

class AuthorizerError(Exception): ...
class AuthenticationFailed(Exception): ...

class DummyAuthorizer:
    read_perms: str
    write_perms: str
    user_table: dict[str, dict[str, Any]]
    def __init__(self) -> None: ...
    def add_user(
        self,
        username: str,
        password: str,
        homedir: str,
        perm: str = "elr",
        msg_login: str = "Login successful.",
        msg_quit: str = "Goodbye.",
    ) -> None: ...
    def add_anonymous(self, homedir: str, **kwargs: Any) -> None: ...
    def remove_user(self, username: str) -> None: ...
    def override_perm(
        self, username: str, directory: str, perm: str, recursive: bool = False
    ) -> None: ...
    def validate_authentication(
        self, username: str, password: str, handler: FTPHandler
    ) -> None: ...
    def get_home_dir(self, username: str) -> str: ...
    def impersonate_user(self, username: str, password: str) -> None: ...
    def terminate_impersonation(self, username: str) -> None: ...
    def has_user(self, username: str) -> bool: ...
    def has_perm(self, username: str, perm: str, path: str | None = None) -> bool: ...
    def get_perms(self, username: str) -> str: ...
    def get_msg_login(self, username: str) -> str: ...
    def get_msg_quit(self, username: str) -> str: ...

class _Base:
    msg_no_such_user: str
    msg_wrong_password: str
    msg_anon_not_allowed: str
    msg_invalid_shell: str
    msg_rejected_user: str
    def __init__(self) -> None: ...
    def override_user(
        self,
        username: str,
        password: str | None = None,
        homedir: str | None = None,
        perm: str | None = None,
        msg_login: str | None = None,
        msg_quit: str | None = None,
    ) -> None: ...
    def get_msg_login(self, username: str) -> str: ...
    def get_msg_quit(self, username: str) -> str: ...
    def get_perms(self, username: str) -> str: ...
    def has_perm(self, username: str, perm: str, path: str | None = None) -> bool: ...

class BaseUnixAuthorizer:
    anonymous_user: str | None
    def __init__(self, anonymous_user: str | None = None) -> None: ...
    def validate_authentication(
        self, username: str, password: str, handler: FTPHandler
    ) -> None: ...
    def impersonate_user(self, username: str, password: str) -> None: ...
    def terminate_impersonation(self, username: str) -> None: ...
    def has_user(self, username: str) -> bool: ...
    def get_home_dir(self, username: str) -> str: ...
    def get_msg_login(self, username: str) -> str: ...
    def get_msg_quit(self, username: str) -> str: ...
    def get_perms(self, username: str) -> str: ...
    def has_perm(self, username: str, perm: str, path: str | None = None) -> bool: ...

class UnixAuthorizer(_Base, BaseUnixAuthorizer):
    global_perm: str
    allowed_users: Sequence[str]
    rejected_users: Sequence[str]
    anonymous_user: str | None
    require_valid_shell: bool
    msg_login: str
    msg_quit: str
    def __init__(
        self,
        global_perm: str = "elradfmwMT",
        allowed_users: Sequence[str] | None = None,
        rejected_users: Sequence[str] | None = None,
        require_valid_shell: bool = True,
        anonymous_user: str | None = None,
        msg_login: str = "Login successful.",
        msg_quit: str = "Goodbye.",
    ) -> None: ...
    def override_user(
        self,
        username: str,
        password: str | None = None,
        homedir: str | None = None,
        perm: str | None = None,
        msg_login: str | None = None,
        msg_quit: str | None = None,
    ) -> None: ...
    def validate_authentication(
        self, username: str, password: str, handler: FTPHandler
    ) -> None: ...
    def has_user(self, username: str) -> bool: ...
    def get_home_dir(self, username: str) -> str: ...

class BaseWindowsAuthorizer:
    anonymous_user: str | None
    anonymous_password: str | None
    def __init__(
        self, anonymous_user: str | None = None, anonymous_password: str | None = None
    ) -> None: ...
    def validate_authentication(
        self, username: str, password: str, handler: FTPHandler
    ) -> None: ...
    def impersonate_user(self, username: str, password: str) -> None: ...
    def terminate_impersonation(self, username: str) -> None: ...
    def has_user(self, username: str) -> bool: ...
    def get_home_dir(self, username: str) -> str: ...
    def get_msg_login(self, username: str) -> str: ...
    def get_msg_quit(self, username: str) -> str: ...
    def get_perms(self, username: str) -> str: ...
    def has_perm(self, username: str, perm: str, path: str | None = None) -> bool: ...

class WindowsAuthorizer(_Base, BaseWindowsAuthorizer):
    global_perm: str
    allowed_users: Sequence[str]
    rejected_users: Sequence[str]
    anonymous_user: str | None
    anonymous_password: str | None
    msg_login: str
    msg_quit: str
    def __init__(
        self,
        global_perm: str = "elradfmwMT",
        allowed_users: Sequence[str] | None = None,
        rejected_users: Sequence[str] | None = None,
        anonymous_user: str | None = None,
        anonymous_password: str | None = None,
        msg_login: str = "Login successful.",
        msg_quit: str = "Goodbye.",
    ) -> None: ...
    def override_user(
        self,
        username: str,
        password: str | None = None,
        homedir: str | None = None,
        perm: str | None = None,
        msg_login: str | None = None,
        msg_quit: str | None = None,
    ) -> None: ...
    def validate_authentication(
        self, username: str, password: str, handler: FTPHandler
    ) -> None: ...
    def impersonate_user(self, username: str, password: str) -> None: ...
    def has_user(self, username: str) -> bool: ...
    def get_home_dir(self, username: str) -> str: ...
